=head1 NAME

builtin.imc - builtin and user defined macros

=head2 DESCRIPTION

Copyright:  2004 Bernhard Schmalhofer.  All Rights Reserved.
CVS Info:   $Id$
History:    Ported from GNU m4 1.4
References: http://www.gnu.org/software/m4/m4.html

Code for all builtin macros, initialisation of symbol table, and
expansion of user defined macros.

=cut

# Some named constants
.include 'iterator.pasm'

=head1 SUBROUTINES

=head2 void _builtin_tab_init( PerlHash state )

Initialise all builtin and predefined macros.

=cut

.sub _builtin_tab_init prototyped             
  .param PerlHash state

  # Generate a table of Sub
  .local pmc builtin_tab
  builtin_tab = state['builtin_tab']

#   { "__file__",		TRUE,	FALSE,	FALSE,	m4___file__ },
  .local pmc builtin__file__
  builtin__file__ = new PerlHash
  builtin__file__['name'] = '__file__'
  .local Sub func__file__
  func__file__ = newsub _m4_not_implemented
  builtin__file__['func'] = func__file__ 
  builtin_tab['__file__'] = builtin__file__

#   { "__line__",		TRUE,	FALSE,	FALSE,	m4___line__ },
  .local pmc builtin__line__
  builtin__line__ = new PerlHash
  builtin__line__['name'] = '__line__'
  .local Sub func__line__
  func__line__ = newsub _m4_not_implemented
  builtin__line__['func'] = func__line__ 
  builtin_tab['__line__'] = builtin__line__

#   { "builtin",		TRUE,	FALSE,	TRUE,	m4_builtin },
  .local pmc builtinbuiltin
  builtinbuiltin = new PerlHash
  builtinbuiltin['name'] = 'builtin'
  .local Sub funcbuiltin
  funcbuiltin = newsub _m4_not_implemented
  builtinbuiltin['func'] = funcbuiltin 
  builtin_tab['builtin'] = builtinbuiltin

#   { "changecom",	FALSE,	FALSE,	FALSE,	m4_changecom },
  .local pmc builtinchangecom
  builtinchangecom = new PerlHash
  builtinchangecom['name'] = 'changecom'
  .local Sub funcchangecom
  funcchangecom = newsub _m4_not_implemented
  builtinchangecom['func'] = funcchangecom 
  builtin_tab['changecom'] = builtinchangecom

#   { "changequote",	FALSE,	FALSE,	FALSE,	m4_changequote },
  .local pmc builtinchangequote
  builtinchangequote = new PerlHash
  builtinchangequote['name'] = 'changequote'
  .local Sub funcchangequote
  funcchangequote = newsub _m4_not_implemented
  builtinchangequote['func'] = funcchangequote 
  builtin_tab['changequote'] = builtinchangequote

#   { "changeword",	TRUE,	FALSE,	FALSE,	m4_changeword },
  .local pmc builtinchangeword
  builtinchangeword = new PerlHash
  builtinchangeword['name'] = 'changeword'
  .local Sub funcchangeword
  funcchangeword = newsub _m4_not_implemented
  builtinchangeword['func'] = funcchangeword 
  builtin_tab['changeword'] = builtinchangeword


#   { "debugmode",	TRUE,	FALSE,	FALSE,	m4_debugmode },
  .local pmc builtindebugmode
  builtindebugmode = new PerlHash
  builtindebugmode['name'] = 'debugmode'
  .local Sub funcdebugmode
  funcdebugmode = newsub _m4_not_implemented
  builtindebugmode['func'] = funcdebugmode 
  builtin_tab['debugmode'] = builtindebugmode

#   { "debugfile",	TRUE,	FALSE,	FALSE,	m4_debugfile },
  .local pmc builtindebugfile
  builtindebugfile = new PerlHash
  builtindebugfile['name'] = 'debugfile'
  .local Sub funcdebugfile
  funcdebugfile = newsub _m4_not_implemented
  builtindebugfile['func'] = funcdebugfile 
  builtin_tab['debugfile'] = builtindebugfile

#   { "decr",		FALSE,	FALSE,	TRUE,	m4_decr },
  .local pmc builtindecr
  builtindecr = new PerlHash
  builtindecr['name'] = 'decr'
  .local Sub funcdecr
  funcdecr = newsub _m4_not_implemented
  builtindecr['func'] = funcdecr 
  builtin_tab['decr'] = builtindecr

#   { "define",		FALSE,	TRUE,	TRUE,	m4_define },
  .local pmc builtindefine
  builtindefine = new PerlHash
  builtindefine['name'] = 'define'
  .local Sub func
  func = newsub _m4_define
  builtindefine['func'] = func 
  builtin_tab['define'] = builtindefine

#   { "defn",		FALSE,	FALSE,	TRUE,	m4_defn },
  .local pmc builtindefn
  builtindefn = new PerlHash
  builtindefn['name'] = 'defn'
  .local Sub funcdefn
  funcdefn = newsub _m4_not_implemented
  builtindefn['func'] = funcdefn 
  builtin_tab['defn'] = builtindefn

#   { "divert",		FALSE,	FALSE,	FALSE,	m4_divert },
  .local pmc builtindivert
  builtindivert = new PerlHash
  builtindivert['name'] = 'divert'
  .local Sub funcdivert
  funcdivert = newsub _m4_not_implemented
  builtindivert['func'] = funcdivert 
  builtin_tab['divert'] = builtindivert

#   { "divnum",		FALSE,	FALSE,	FALSE,	m4_divnum },
  .local pmc builtindivnum
  builtindivnum = new PerlHash
  builtindivnum['name'] = 'divnum'
  .local Sub funcdivnum
  funcdivnum = newsub _m4_not_implemented
  builtindivnum['func'] = funcdivnum 
  builtin_tab['divnum'] = builtindivnum

#   { "dnl",		FALSE,	FALSE,	FALSE,	m4_dnl },
  .local pmc builtindnl
  builtindnl = new PerlHash
  builtindnl['name'] = 'dnl'
  .local Sub funcdnl
  funcdnl = newsub _m4_not_implemented
  builtindnl['func'] = funcdnl 
  builtin_tab['dnl'] = builtindnl

#   { "dumpdef",		FALSE,	FALSE,	FALSE,	m4_dumpdef },
  .local pmc builtindumpdef
  builtindumpdef = new PerlHash
  builtindumpdef['name'] = 'dumpdef'
  .local Sub funcdumpdef
  funcdumpdef = newsub _m4_not_implemented
  builtindumpdef['func'] = funcdumpdef 
  builtin_tab['dumpdef'] = builtindumpdef

#   { "errprint",		FALSE,	FALSE,	FALSE,	m4_errprint },
  .local pmc builtinerrprint
  builtinerrprint = new PerlHash
  builtinerrprint['name'] = 'errprint'
  .local Sub funcerrprint
  funcerrprint = newsub _m4_not_implemented
  builtinerrprint['func'] = funcerrprint 
  builtin_tab['errprint'] = builtinerrprint

#   { "esyscmd",		TRUE,	FALSE,	TRUE,	m4_esyscmd },
  .local pmc builtinesyscmd
  builtinesyscmd = new PerlHash
  builtinesyscmd['name'] = 'esyscmd'
  .local Sub funcesyscmd
  funcesyscmd = newsub _m4_not_implemented
  builtinesyscmd['func'] = funcesyscmd 
  builtin_tab['esyscmd'] = builtinesyscmd

#   { "eval",		FALSE,	FALSE,	TRUE,	m4_eval },
  .local pmc builtineval
  builtineval = new PerlHash
  builtineval['name'] = 'eval'
  .local Sub funceval
  funceval = newsub _m4_not_implemented
  builtineval['func'] = funceval 
  builtin_tab['eval'] = builtineval

#   { "format",		TRUE,	FALSE,	FALSE,	m4_format },
  .local pmc builtinformat
  builtinformat = new PerlHash
  builtinformat['name'] = 'format'
  .local Sub funcformat
  funcformat = newsub _m4_not_implemented
  builtinformat['func'] = funcformat 
  builtin_tab['format'] = builtinformat

#   { "ifdef",		FALSE,	FALSE,	TRUE,	m4_ifdef },
  .local pmc builtinifdef
  builtinifdef = new PerlHash
  builtinifdef['name'] = 'ifdef'
  .local Sub funcifdef
  funcifdef = newsub _m4_not_implemented
  builtinifdef['func'] = funcifdef 
  builtin_tab['ifdef'] = builtinifdef

#   { "ifelse",		FALSE,	FALSE,	TRUE,	m4_ifelse },
  .local pmc builtinifelse
  builtinifelse = new PerlHash
  builtinifelse['name'] = 'ifelse'
  .local Sub funcifelse
  funcifelse = newsub _m4_not_implemented
  builtinifelse['func'] = funcifelse 
  builtin_tab['ifelse'] = builtinifelse

#   { "include",		FALSE,	FALSE,	TRUE,	m4_include },
  .local pmc builtininclude
  builtininclude = new PerlHash
  builtininclude['name'] = 'include'
  .local Sub funcinclude
  funcinclude = newsub _m4_not_implemented
  builtininclude['func'] = funcinclude 
  builtin_tab['include'] = builtininclude

#   { "incr",		FALSE,	FALSE,	TRUE,	m4_incr },
  .local pmc builtinincr
  builtinincr = new PerlHash
  builtinincr['name'] = 'incr'
  .local Sub funcincr
  funcincr = newsub _m4_not_implemented
  builtinincr['func'] = funcincr 
  builtin_tab['incr'] = builtinincr

#   { "index",		FALSE,	FALSE,	TRUE,	m4_index },
  .local pmc builtinindex
  builtinindex = new PerlHash
  builtinindex['name'] = 'index'
  .local Sub funcindex
  funcindex = newsub _m4_not_implemented
  builtinindex['func'] = funcindex 
  builtin_tab['index'] = builtinindex

#   { "indir",		TRUE,	FALSE,	FALSE,	m4_indir },
  .local pmc builtinindir
  builtinindir = new PerlHash
  builtinindir['name'] = 'indir'
  .local Sub funcindir
  funcindir = newsub _m4_not_implemented
  builtinindir['func'] = funcindir 
  builtin_tab['indir'] = builtinindir

#   { "len",		FALSE,	FALSE,	TRUE,	m4_len },
  .local pmc builtinlen
  builtinlen = new PerlHash
  builtinlen['name'] = 'len'
  .local Sub funclen
  funclen = newsub _m4_not_implemented
  builtinlen['func'] = funclen 
  builtin_tab['len'] = builtinlen

#   { "m4exit",		FALSE,	FALSE,	FALSE,	m4_m4exit },
  .local pmc builtinm4exit
  builtinm4exit = new PerlHash
  builtinm4exit['name'] = 'm4exit'
  .local Sub funcm4exit
  funcm4exit = newsub _m4_not_implemented
  builtinm4exit['func'] = funcm4exit 
  builtin_tab['m4exit'] = builtinm4exit

#   { "m4wrap",		FALSE,	FALSE,	FALSE,	m4_m4wrap },
  .local pmc builtinm4wrap
  builtinm4wrap = new PerlHash
  builtinm4wrap['name'] = 'm4wrap'
  .local Sub funcm4wrap
  funcm4wrap = newsub _m4_not_implemented
  builtinm4wrap['func'] = funcm4wrap 
  builtin_tab['m4wrap'] = builtinm4wrap

#   { "maketemp",		FALSE,	FALSE,	TRUE,	m4_maketemp },
  .local pmc builtinmaketemp
  builtinmaketemp = new PerlHash
  builtinmaketemp['name'] = 'maketemp'
  .local Sub funcmaketemp
  funcmaketemp = newsub _m4_not_implemented
  builtinmaketemp['func'] = funcmaketemp 
  builtin_tab['maketemp'] = builtinmaketemp

#   { "patsubst",		TRUE,	FALSE,	TRUE,	m4_patsubst },
  .local pmc builtinpatsubst
  builtinpatsubst = new PerlHash
  builtinpatsubst['name'] = 'patsubst'
  .local Sub funcpatsubst
  funcpatsubst = newsub _m4_not_implemented
  builtinpatsubst['func'] = funcpatsubst 
  builtin_tab['patsubst'] = builtinpatsubst

#   { "popdef",		FALSE,	FALSE,	TRUE,	m4_popdef },
  .local pmc builtinpopdef
  builtinpopdef = new PerlHash
  builtinpopdef['name'] = 'popdef'
  .local Sub funcpopdef
  funcpopdef = newsub _m4_not_implemented
  builtinpopdef['func'] = funcpopdef 
  builtin_tab['popdef'] = builtinpopdef

#   { "pushdef",		FALSE,	TRUE,	TRUE,	m4_pushdef },
  .local pmc builtinpushdef
  builtinpushdef = new PerlHash
  builtinpushdef['name'] = 'pushdef'
  .local Sub funcpushdef
  funcpushdef = newsub _m4_not_implemented
  builtinpushdef['func'] = funcpushdef 
  builtin_tab['pushdef'] = builtinpushdef

#   { "regexp",		TRUE,	FALSE,	TRUE,	m4_regexp },
  .local pmc builtinregexp
  builtinregexp = new PerlHash
  builtinregexp['name'] = 'regexp'
  .local Sub funcregexp
  funcregexp = newsub _m4_not_implemented
  builtinregexp['func'] = funcregexp 
  builtin_tab['regexp'] = builtinregexp

#   { "shift",		FALSE,	FALSE,	FALSE,	m4_shift },
  .local pmc builtinshift
  builtinshift = new PerlHash
  builtinshift['name'] = 'shift'
  .local Sub funcshift
  funcshift = newsub _m4_not_implemented
  builtinshift['func'] = funcshift 
  builtin_tab['shift'] = builtinshift

#   { "sinclude",		FALSE,	FALSE,	TRUE,	m4_sinclude },
  .local pmc builtinsinclude
  builtinsinclude = new PerlHash
  builtinsinclude['name'] = 'sinclude'
  .local Sub funcsinclude
  funcsinclude = newsub _m4_not_implemented
  builtinsinclude['func'] = funcsinclude 
  builtin_tab['sinclude'] = builtinsinclude

#   { "substr",		FALSE,	FALSE,	TRUE,	m4_substr },
  .local pmc builtinsubstr
  builtinsubstr = new PerlHash
  builtinsubstr['name'] = 'substr'
  .local Sub funcsubstr
  funcsubstr = newsub _m4_not_implemented
  builtinsubstr['func'] = funcsubstr 
  builtin_tab['substr'] = builtinsubstr

#   { "syscmd",		FALSE,	FALSE,	TRUE,	m4_syscmd },
  .local pmc builtinsyscmd
  builtinsyscmd = new PerlHash
  builtinsyscmd['name'] = 'syscmd'
  .local Sub funcsyscmd
  funcsyscmd = newsub _m4_not_implemented
  builtinsyscmd['func'] = funcsyscmd 
  builtin_tab['syscmd'] = builtinsyscmd

#   { "sysval",		FALSE,	FALSE,	FALSE,	m4_sysval },
  .local pmc builtinsysval
  builtinsysval = new PerlHash
  builtinsysval['name'] = 'sysval'
  .local Sub funcsysval
  funcsysval = newsub _m4_not_implemented
  builtinsysval['func'] = funcsysval 
  builtin_tab['sysval'] = builtinsysval

#   { "traceoff",		FALSE,	FALSE,	FALSE,	m4_traceoff },
  .local pmc builtintraceoff
  builtintraceoff = new PerlHash
  builtintraceoff['name'] = 'traceoff'
  .local Sub functraceoff
  functraceoff = newsub _m4_not_implemented
  builtintraceoff['func'] = functraceoff 
  builtin_tab['traceoff'] = builtintraceoff

#   { "traceon",		FALSE,	FALSE,	FALSE,	m4_traceon },
  .local pmc builtintraceon
  builtintraceon = new PerlHash
  builtintraceon['name'] = 'traceon'
  .local Sub functraceon
  functraceon = newsub _m4_not_implemented
  builtintraceon['func'] = functraceon 
  builtin_tab['traceon'] = builtintraceon

#   { "translit",		FALSE,	FALSE,	TRUE,	m4_translit },
  .local pmc builtintranslit
  builtintranslit = new PerlHash
  builtintranslit['name'] = 'translit'
  .local Sub functranslit
  functranslit = newsub _m4_not_implemented
  builtintranslit['func'] = functranslit 
  builtin_tab['translit'] = builtintranslit

#   { "undefine",		FALSE,	FALSE,	TRUE,	m4_undefine },
  .local pmc builtinundefine
  builtinundefine = new PerlHash
  builtinundefine['name'] = 'undefine'
  .local Sub funcundefine
  funcundefine = newsub _m4_not_implemented
  builtinundefine['func'] = funcundefine 
  builtin_tab['undefine'] = builtinundefine

#   { "undivert",		FALSE,	FALSE,	FALSE,	m4_undivert },
  .local pmc builtinundivert
  builtinundivert = new PerlHash
  builtinundivert['name'] = 'undivert'
  .local Sub funcundivert
  funcundivert = newsub _m4_not_implemented
  builtinundivert['func'] = funcundivert 
  builtin_tab['undivert'] = builtinundivert

  .pcc_begin_return
    # void
  .pcc_end_return
.end


=head2 void _builtin_init( PerlHash state )

Initialise all builtin and predefined macros.

=cut

.sub _builtin_init prototyped             
  .param PerlHash state

  # Now generate a new macro and store it
  .local Sub define_builtin
  define_builtin = newsub _define_builtin

  .local pmc builtin_tab
  builtin_tab = state['builtin_tab']
  .local pmc builtin
  .local pmc iterator
  .local string name
  iterator = new Iterator, builtin_tab
  set iterator, .ITERATE_FROM_START
  iter_loop:
  unless iterator, end_iter
    shift builtin, iterator
    name = builtin['name']
    .pcc_begin prototyped
      .arg state
      .arg name
      .arg builtin
    .pcc_call define_builtin
      ret_define_builtin_1:
    .pcc_end
  branch iter_loop
  end_iter:

  .pcc_begin_return
    # void
  .pcc_end_return
.end


=head2 void _define_builtin( PerlHash state, string name, string bp )

Install a builtin macro with name 'name', bound to the function 'bp'.

TODO: implement this.

=cut

.sub _define_builtin prototyped            
  .param PerlHash  state
  .param string    name
  .param PerlHash  builtin

  .local pmc symtab
  symtab = state['symtab']

  # Now store the passed symbol
  .local pmc symbol
  symbol = new PerlHash
  symbol['name'] = name
  symbol['type'] = 'TOKEN_FUNC'

  .local string text
  text = builtin['name']
  symbol['text'] = text

  .local Sub func
  func = builtin['func']
  symbol['func'] = func

  symtab[name] = symbol

  .pcc_begin_return
    # void
  .pcc_end_return
.end


=head2 void define_user_macro( PerlHash state, string name, string text )

Define a predefined or user-defined macro, with name 'name', and expansion 'text'. 
This function is also called from main(). 

=cut

.sub _define_user_macro prototyped             
  .param PerlHash  state
  .param string    name     
  .param string    text

  .local pmc symtab
  symtab = state['symtab']

  # Now store the passed symbol
  .local pmc symbol
  symbol = new PerlHash
  symbol['name'] = name
  symbol['text'] = text
  symbol['type'] = 'TOKEN_TEXT'

  symtab[name] = symbol

  .pcc_begin_return
    # void
  .pcc_end_return
.end



=head2 _define_macro

The function define_macro is common for the builtins "define",
"undefine", "pushdef" and "popdef".  ARGC and ARGV is as for the caller,
and MODE argument determines how the macro name is entered into the
symbol table.							

=cut

.sub _define_macro prototyped             
  .param PerlHash  state
  .param string    name
  .param string    text

  # right now we handle only TOKEN_TEXT
  .local Sub    define_user_macro
  define_user_macro = newsub _define_user_macro

  .pcc_begin prototyped
    .arg state
    .arg name
    .arg text
  .pcc_call define_user_macro
    ret_define_user_macro_1:
  .pcc_end

  .pcc_begin_return
    # void
  .pcc_end_return
.end


=head2 _m4_define

=cut

.sub _m4_define prototyped             
  .param PerlHash  state
  .param string    name
  .param string    text

  # right now we handle only TOKEN_TEXT
  .local Sub    define_macro
  define_macro = newsub _define_macro

  .pcc_begin prototyped
    .arg state
    .arg name
    .arg text
  .pcc_call define_macro
    ret_define_macro_1:
  .pcc_end

  .pcc_begin_return
    .return ''
  .pcc_end_return
.end


=head2 _m4_not_implemented

A placeholder for unimplemented functions.

=cut

.sub _m4_not_implemented prototyped             
  .param PerlHash  state

  .pcc_begin_return
    # void
  .pcc_end_return
.end

# List of builtin macros from GNU m4
# static builtin
# builtin_tab[] =
# {
# 
#   /* name  GNUext	macros	blind	function */
# 
#   { "__file__",		TRUE,	FALSE,	FALSE,	m4___file__ },
#   { "__line__",		TRUE,	FALSE,	FALSE,	m4___line__ },
#   { "builtin",		TRUE,	FALSE,	TRUE,	m4_builtin },
#   { "changecom",	FALSE,	FALSE,	FALSE,	m4_changecom },
#   { "changequote",	FALSE,	FALSE,	FALSE,	m4_changequote },
# #ifdef ENABLE_CHANGEWORD
#   { "changeword",	TRUE,	FALSE,	FALSE,	m4_changeword },
# #endif
#   { "debugmode",	TRUE,	FALSE,	FALSE,	m4_debugmode },
#   { "debugfile",	TRUE,	FALSE,	FALSE,	m4_debugfile },
#   { "decr",		FALSE,	FALSE,	TRUE,	m4_decr },
#   { "define",		FALSE,	TRUE,	TRUE,	m4_define },
#   { "defn",		FALSE,	FALSE,	TRUE,	m4_defn },
#   { "divert",		FALSE,	FALSE,	FALSE,	m4_divert },
#   { "divnum",		FALSE,	FALSE,	FALSE,	m4_divnum },
#   { "dnl",		FALSE,	FALSE,	FALSE,	m4_dnl },
#   { "dumpdef",		FALSE,	FALSE,	FALSE,	m4_dumpdef },
#   { "errprint",		FALSE,	FALSE,	FALSE,	m4_errprint },
#   { "esyscmd",		TRUE,	FALSE,	TRUE,	m4_esyscmd },
#   { "eval",		FALSE,	FALSE,	TRUE,	m4_eval },
#   { "format",		TRUE,	FALSE,	FALSE,	m4_format },
#   { "ifdef",		FALSE,	FALSE,	TRUE,	m4_ifdef },
#   { "ifelse",		FALSE,	FALSE,	TRUE,	m4_ifelse },
#   { "include",		FALSE,	FALSE,	TRUE,	m4_include },
#   { "incr",		FALSE,	FALSE,	TRUE,	m4_incr },
#   { "index",		FALSE,	FALSE,	TRUE,	m4_index },
#   { "indir",		TRUE,	FALSE,	FALSE,	m4_indir },
#   { "len",		FALSE,	FALSE,	TRUE,	m4_len },
#   { "m4exit",		FALSE,	FALSE,	FALSE,	m4_m4exit },
#   { "m4wrap",		FALSE,	FALSE,	FALSE,	m4_m4wrap },
#   { "maketemp",		FALSE,	FALSE,	TRUE,	m4_maketemp },
#   { "patsubst",		TRUE,	FALSE,	TRUE,	m4_patsubst },
#   { "popdef",		FALSE,	FALSE,	TRUE,	m4_popdef },
#   { "pushdef",		FALSE,	TRUE,	TRUE,	m4_pushdef },
#   { "regexp",		TRUE,	FALSE,	TRUE,	m4_regexp },
#   { "shift",		FALSE,	FALSE,	FALSE,	m4_shift },
#   { "sinclude",		FALSE,	FALSE,	TRUE,	m4_sinclude },
#   { "substr",		FALSE,	FALSE,	TRUE,	m4_substr },
#   { "syscmd",		FALSE,	FALSE,	TRUE,	m4_syscmd },
#   { "sysval",		FALSE,	FALSE,	FALSE,	m4_sysval },
#   { "traceoff",		FALSE,	FALSE,	FALSE,	m4_traceoff },
#   { "traceon",		FALSE,	FALSE,	FALSE,	m4_traceon },
#   { "translit",		FALSE,	FALSE,	TRUE,	m4_translit },
#   { "undefine",		FALSE,	FALSE,	TRUE,	m4_undefine },
#   { "undivert",		FALSE,	FALSE,	FALSE,	m4_undivert },
# 
#   { 0,			FALSE,	FALSE,	FALSE,	0 },
# };
# 
# static predefined const
# predefined_tab[] =
# {
#   { "unix",	"__unix__",	"" },
#   { NULL,	"__gnu__",	"" },
# 
#   { NULL,	NULL,		NULL },
# };
